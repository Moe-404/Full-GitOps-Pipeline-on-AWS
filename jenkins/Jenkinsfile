pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-agent
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command:
    - sleep
    args:
    - 9999999
    volumeMounts:
    - name: jenkins-docker-cfg
      mountPath: /kaniko/.docker
    env:
    - name: AWS_DEFAULT_REGION
      value: us-east-1
  - name: aws-cli
    image: amazon/aws-cli:latest
    command:
    - sleep
    args:
    - 9999999
    volumeMounts:
    - name: jenkins-docker-cfg
      mountPath: /kaniko/.docker
    env:
    - name: AWS_DEFAULT_REGION
      value: us-east-1
  volumes:
  - name: jenkins-docker-cfg
    emptyDir: {}
"""
        }
    }
    
    environment {
        // AWS Configuration
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = "627073650373"
        ECR_REPOSITORY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/devops-gp-repository"
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Application Repository
        NODEJS_REPO = 'https://github.com/Moe-404/jenkins_nodejs_example.git'
        
        // Slack Configuration
        SLACK_CHANNEL = '#all-jenkins'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    echo "📥 Cloning NodeJS application repository..."
                    
                    // Clean workspace first
                    sh 'rm -rf ./* || true'
                    // Simple git clone
                    sh """
                        git clone ${env.NODEJS_REPO} app-source
                        cd app-source
                        ls -la
                        echo "✅ Repository cloned successfully"
                    """
                }
            }
        }
        
        stage('Validate Dockerfile') {
            steps {
                script {
                    echo "🔍 Checking for Dockerfile..."
                    if (!fileExists('app-source/dockerfile')) {
                        echo "⚠️ No Dockerfile found, creating a basic one..."
                        writeFile file: 'app-source/dockerfile', text: '''FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install --only=production

# Copy application code
COPY . .

# Expose port
EXPOSE 3000

# Start application
CMD ["npm", "start"]
'''
                    } else {
                        echo "✅ Dockerfile found in app-source directory"
                    }
                }
            }
        }
        
        stage('Setup ECR Authentication') {
            steps {
                container('aws-cli') {
                    script {
                        echo "🔧 Setting up ECR authentication for Kaniko..."
                        
                        withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'aws-credentials',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            sh '''
                                echo "Creating ECR repository if it doesn't exist..."
                                aws ecr describe-repositories --repository-names devops-gp-repository --region ${AWS_DEFAULT_REGION} || \
                                aws ecr create-repository --repository-name devops-gp-repository --region ${AWS_DEFAULT_REGION}
                                
                                echo "Setting up ECR authentication for Kaniko..."
                                
                                # Ensure the directory exists
                                mkdir -p /kaniko/.docker
                                
                                # Get ECR login token
                                ECR_TOKEN=$(aws ecr get-login-password --region ${AWS_DEFAULT_REGION})
                                
                                # Create Docker config file for Kaniko
                                cat > /kaniko/.docker/config.json << EOF
{
    "auths": {
        "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com": {
            "auth": "$(echo -n AWS:${ECR_TOKEN} | base64 -w 0)"
        }
    }
}
EOF
                                
                                echo "✅ ECR authentication config created successfully"
                                echo "Config file created at: /kaniko/.docker/config.json"
                                
                                # Verify the config file was created
                                ls -la /kaniko/.docker/
                                
                                # Display config contents (handle missing jq gracefully)
                                echo "Docker config file verification:"
                                if command -v jq &> /dev/null; then
                                    echo "Config structure (auth tokens hidden for security):"
                                    cat /kaniko/.docker/config.json | jq 'del(.auths[].auth)'
                                else
                                    echo "Config file size: $(wc -c < /kaniko/.docker/config.json) bytes"
                                    echo "Config file contains ECR registry: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                                fi
                                
                                echo "✅ ECR authentication setup completed"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Build & Push with Kaniko') {
            steps {
                container('kaniko') {
                    script {
                        echo "🔨 Building and pushing image with Kaniko..."
                        
                        withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'aws-credentials',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            sh '''
                                echo "Verifying ECR config is available..."
                                ls -la /kaniko/.docker/
                                
                                if [ -f "/kaniko/.docker/config.json" ]; then
                                    echo "✅ Docker config file found"
                                    echo "File size: $(wc -c < /kaniko/.docker/config.json) bytes"
                                else
                                    echo "❌ Docker config file not found!"
                                    exit 1
                                fi
                                
                                echo "Starting Kaniko build..."
                                
                                /kaniko/executor \
                                    --context=dir://./app-source \
                                    --dockerfile=./app-source/dockerfile \
                                    --destination=${ECR_REPOSITORY}:${IMAGE_TAG} \
                                    --destination=${ECR_REPOSITORY}:latest \
                                    --cache=true \
                                    --cleanup \
                                    --verbosity=info
                                
                                echo "✅ Kaniko build and push completed successfully"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                container('aws-cli') {
                    script {
                        echo "✅ Verifying image deployment in ECR..."
                        
                        withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'aws-credentials',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            sh '''
                                echo "📊 Checking images in ECR repository:"
                                aws ecr describe-images \
                                    --repository-name devops-gp-repository \
                                    --region ${AWS_DEFAULT_REGION} \
                                    --query 'imageDetails[*].[imageTags[0],imagePushedAt,imageSizeInBytes]' \
                                    --output table
                                
                                echo "✅ Successfully verified images in ECR"
                            '''
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                def duration = currentBuild.durationString.replace(' and counting', '')
                
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'good',
                    message: "✅ *Pipeline SUCCESS* - ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                            "Duration: ${duration}\n" +
                            "Image: `${ECR_REPOSITORY}:${IMAGE_TAG}`\n" +
                            "Repository: ${env.NODEJS_REPO}\n" +
                            "Platform: Jenkins K8s + Kaniko + ECR 🚀"
                )
            }
        }
        
        failure {
            script {
                def failedStage = env.STAGE_NAME ?: 'Unknown'
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'danger',
                    message: "❌ *Pipeline FAILED* - ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                            "Failed Stage: ${failedStage}\n" +
                            "Repository: ${env.NODEJS_REPO}\n" +
                            "Logs: ${env.BUILD_URL}console\n" +
                            "Please check the build logs for details 🔍"
                )
            }
        }
        
        always {
            echo "🧹 Cleaning up workspace..."
            sh 'rm -rf app-source || true'
        }
    }
}