pipeline {
    agent any
    
    environment {
        // AWS Configuration
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = "627073650373"
        ECR_REPOSITORY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/devops-gp-repository"
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Application Repository
        NODEJS_REPO = 'https://github.com/Moe-404/jenkins_nodejs_example.git'
        
        // Slack Configuration
        SLACK_WEBHOOK = credentials('slack-webhook-url')
        SLACK_CHANNEL = '#all-jenkins'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    echo "üì• Cloning NodeJS application repository..."
                    
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[
                            url: "${env.NODEJS_REPO}",
                            credentialsId: 'github-credentials'
                        ]]
                    ])
                    
                    echo "‚úÖ Repository cloned successfully"
                }
            }
        }
        
        stage('Validate Dockerfile') {
            steps {
                script {
                    echo "üîç Checking for Dockerfile..."
                    if (!fileExists('Dockerfile')) {
                        echo "‚ö†Ô∏è No Dockerfile found, creating a basic one..."
                        writeFile file: 'Dockerfile', text: '''FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install --only=production

# Copy application code
COPY . .

# Expose port
EXPOSE 3000

# Start application
CMD ["npm", "start"]
'''
                    } else {
                        echo "‚úÖ Dockerfile found"
                    }
                }
            }
        }
        
        stage('Setup ECR Authentication') {
            steps {
                script {
                    echo "üîê Setting up ECR authentication for Kaniko..."
                    
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh '''
                            echo "Checking required tools..."
                            which kaniko-executor || which /kaniko/executor || (echo "‚ùå Kaniko not found, downloading..." && wget -O kaniko-executor https://github.com/GoogleContainerTools/kaniko/releases/latest/download/executor-linux-amd64 && chmod +x kaniko-executor)
                            aws --version || (echo "‚ùå AWS CLI not found" && exit 1)
                            
                            echo "Creating ECR repository if it doesn't exist..."
                            aws ecr describe-repositories --repository-names devops-gp-repository --region ${AWS_DEFAULT_REGION} || \
                            aws ecr create-repository --repository-name devops-gp-repository --region ${AWS_DEFAULT_REGION}
                            
                            echo "Setting up Kaniko authentication..."
                            mkdir -p /tmp/kaniko/.docker
                            
                            # Get ECR login token
                            ECR_TOKEN=$(aws ecr get-login-password --region ${AWS_DEFAULT_REGION})
                            
                            # Create Docker config for Kaniko
                            cat > /tmp/kaniko/.docker/config.json << EOF
{
    "auths": {
        "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com": {
            "username": "AWS",
            "password": "$ECR_TOKEN"
        }
    }
}
EOF
                            echo "‚úÖ ECR authentication configured for Kaniko"
                        '''
                    }
                }
            }
        }
        
        stage('Build and Push with Kaniko') {
            steps {
                script {
                    echo "üê≥ Building and pushing image with Kaniko..."
                    
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh '''
                            # Set Kaniko config directory
                            export DOCKER_CONFIG=/tmp/kaniko/.docker
                            
                            # Use kaniko-executor (downloaded or system installed)
                            KANIKO_EXECUTOR=""
                            if [ -f "./kaniko-executor" ]; then
                                KANIKO_EXECUTOR="./kaniko-executor"
                            elif [ -f "/kaniko/executor" ]; then
                                KANIKO_EXECUTOR="/kaniko/executor"
                            elif which kaniko-executor > /dev/null 2>&1; then
                                KANIKO_EXECUTOR="kaniko-executor"
                            else
                                echo "‚ùå Kaniko executor not found"
                                exit 1
                            fi
                            
                            echo "Using Kaniko executor: $KANIKO_EXECUTOR"
                            
                            # Build and push with Kaniko
                            $KANIKO_EXECUTOR \\
                                --dockerfile=./Dockerfile \\
                                --context=dir://$PWD \\
                                --destination=${ECR_REPOSITORY}:${IMAGE_TAG} \\
                                --destination=${ECR_REPOSITORY}:latest \\
                                --cache=true \\
                                --cache-ttl=24h \\
                                --cleanup
                                
                            echo "‚úÖ Image built and pushed successfully with Kaniko"
                            echo "üì¶ Image: ${ECR_REPOSITORY}:${IMAGE_TAG}"
                            echo "üì¶ Image: ${ECR_REPOSITORY}:latest"
                        '''
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo "‚úÖ Verifying image deployment in ECR..."
                    
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh '''
                            echo "üìä Checking images in ECR repository:"
                            aws ecr describe-images \
                                --repository-name devops-gp-repository \
                                --region ${AWS_DEFAULT_REGION} \
                                --query 'imageDetails[*].[imageTags[0],imagePushedAt,imageSizeInBytes]' \
                                --output table
                            
                            echo "‚úÖ Successfully verified images in ECR"
                        '''
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo "üßπ Cleaning up temporary files..."
                    sh '''
                        # Clean up Kaniko auth files
                        rm -rf /tmp/kaniko/.docker || true
                        
                        # Clean up downloaded kaniko executor if any
                        rm -f ./kaniko-executor || true
                        
                        echo "‚úÖ Cleanup completed"
                    '''
                }
            }
        }
    }
    
    post {
        success {
            script {
                def duration = currentBuild.durationString.replace(' and counting', '')
                
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'good',
                    message: "‚úÖ *Pipeline SUCCESS* - ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                            "Duration: ${duration}\n" +
                            "Image: `${ECR_REPOSITORY}:${IMAGE_TAG}`\n" +
                            "Repository: ${env.NODEJS_REPO}\n" +
                            "Platform: Jenkins + Kaniko + ECR üöÄ"
                )
            }
        }
        
        failure {
            script {
                def failedStage = env.STAGE_NAME ?: 'Unknown'
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'danger',
                    message: "‚ùå *Pipeline FAILED* - ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                            "Failed Stage: ${failedStage}\n" +
                            "Repository: ${env.NODEJS_REPO}\n" +
                            "Logs: ${env.BUILD_URL}console\n" +
                            "Please check the build logs for details üîç"
                )
            }
        }
        
        always {
            script {
                try {
                    cleanWs(
                        cleanWhenAborted: true,
                        cleanWhenFailure: true,
                        cleanWhenNotBuilt: true,
                        cleanWhenSuccess: true,
                        cleanWhenUnstable: true,
                        deleteDirs: true
                    )
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Workspace cleanup failed: ${e.getMessage()}"
                }
            }
        }
    }
}