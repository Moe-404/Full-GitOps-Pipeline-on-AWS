pipeline {
    agent any
    
    environment {
        // AWS Configuration
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = "627073650373"
        ECR_REPOSITORY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/devops-gp-repository"
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Application Repository
        NODEJS_REPO = 'https://github.com/Moe-404/jenkins_nodejs_example.git'
        
        // Slack Configuration
        SLACK_CHANNEL = '#all-jenkins'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    echo "üì• Cloning NodeJS application repository using basic git commands..."
                    
                    // Clean workspace first
                    sh 'rm -rf ./* || true'
                    // Simple git clone instead of SCM checkout
                    sh """
                        git clone ${env.NODEJS_REPO} app-source
                        cd app-source
                        ls -la
                        echo "‚úÖ Repository cloned successfully"
                    """
                }
            }
        }
        
        stage('Validate Dockerfile') {
            steps {
                script {
                    echo "üîç Checking for Dockerfile..."
                    if (!fileExists('app-source/dockerfile')) {
                        echo "‚ö†Ô∏è No Dockerfile found, creating a basic one..."
                        writeFile file: 'app-source/dockerfile', text: '''FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install --only=production

# Copy application code
COPY . .

# Expose port
EXPOSE 3000

# Start application
CMD ["npm", "start"]
'''
                    } else {
                        echo "‚úÖ Dockerfile found in app-source directory"
                    }
                }
            }
        }
        
        stage('Setup ECR & Build with Buildah') {
            steps {
                script {
                    echo "üî® Setting up ECR and building with Buildah..."
                    
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                            # Set up AWS CLI
                            export PATH=/tmp/aws-cli/v2/current/bin:$PATH
                            
                            echo "Installing Buildah..."
                            # Install buildah (if not available)
                            if ! command -v buildah &> /dev/null; then
                                echo "Installing Buildah via package manager..."
                                # This might need sudo permissions
                                apt-get update && apt-get install -y buildah || \
                                yum install -y buildah || \
                                echo "Please install buildah manually"
                            fi
                            
                            echo "Creating ECR repository..."
                            aws ecr describe-repositories --repository-names devops-gp-repository --region ${AWS_DEFAULT_REGION} || \
                            aws ecr create-repository --repository-name devops-gp-repository --region ${AWS_DEFAULT_REGION}
                            
                            echo "Login to ECR..."
                            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | buildah login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                            
                            echo "Building with Buildah..."
                            cd app-source
                            buildah build -t ${ECR_REPOSITORY}:${IMAGE_TAG} .
                            buildah tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REPOSITORY}:latest
                            
                            echo "Pushing to ECR..."
                            buildah push ${ECR_REPOSITORY}:${IMAGE_TAG}
                            buildah push ${ECR_REPOSITORY}:latest
                            
                            echo "‚úÖ Build and push completed with Buildah"
                        '''
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo "‚úÖ Verifying image deployment in ECR..."
                    
                        withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'aws-credentials',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                            # Add AWS CLI to PATH
                            export PATH=/tmp/aws-cli/v2/current/bin:$PATH
                            
                            echo "üìä Checking images in ECR repository:"
                            aws ecr describe-images \
                                --repository-name devops-gp-repository \
                                --region ${AWS_DEFAULT_REGION} \
                                --query 'imageDetails[*].[imageTags[0],imagePushedAt,imageSizeInBytes]' \
                                --output table
                            
                            echo "‚úÖ Successfully verified images in ECR"
                        '''
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo "üßπ Cleaning up temporary files..."
                    sh '''
                        # Clean up Kaniko auth files
                        rm -rf /tmp/kaniko/.docker || true
                        
                        # Clean up downloaded kaniko executor if any
                        rm -f ./kaniko-executor || true
                        
                        echo "‚úÖ Cleanup completed"
                    '''
                }
            }
        }
    }
    
    post {
        success {
            script {
                def duration = currentBuild.durationString.replace(' and counting', '')
                
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'good',
                    message: "‚úÖ *Pipeline SUCCESS* - ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                            "Duration: ${duration}\n" +
                            "Image: `${ECR_REPOSITORY}:${IMAGE_TAG}`\n" +
                            "Repository: ${env.NODEJS_REPO}\n" +
                            "Platform: Jenkins + Buildah + ECR üöÄ"
                )
            }
        }
        
        failure {
            script {
                def failedStage = env.STAGE_NAME ?: 'Unknown'
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'danger',
                    message: "‚ùå *Pipeline FAILED* - ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                            "Failed Stage: ${failedStage}\n" +
                            "Repository: ${env.NODEJS_REPO}\n" +
                            "Logs: ${env.BUILD_URL}console\n" +
                            "Please check the build logs for details üîç"
                )
            }
        }
    }
}