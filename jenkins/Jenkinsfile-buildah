pipeline {
    agent any
    
    environment {
        // AWS Configuration
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = "627073650373"
        ECR_REPOSITORY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/devops-gp-repository"
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Application Repository
        NODEJS_REPO = 'https://github.com/Moe-404/jenkins_nodejs_example.git'
        
        // Slack Configuration
        SLACK_WEBHOOK = credentials('slack-webhook-url')
        SLACK_CHANNEL = '#all-jenkins'
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    echo "üì• Cloning NodeJS application repository..."
                    
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[
                            url: "${env.NODEJS_REPO}",
                            credentialsId: 'github-credentials'
                        ]]
                    ])
                    
                    echo "‚úÖ Repository cloned successfully"
                }
            }
        }
        
        stage('Validate Dockerfile') {
            steps {
                script {
                    echo "üîç Checking for Dockerfile..."
                    if (!fileExists('Dockerfile')) {
                        echo "‚ö†Ô∏è No Dockerfile found, creating a basic one..."
                        writeFile file: 'Dockerfile', text: '''FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install --only=production

# Copy application code
COPY . .

# Expose port
EXPOSE 3000

# Start application
CMD ["npm", "start"]
'''
                    } else {
                        echo "‚úÖ Dockerfile found"
                    }
                }
            }
        }
        
        stage('Build and Push with Buildah') {
            steps {
                script {
                    echo "üî® Building and pushing with Buildah..."
                    
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh '''
                            echo "Checking for Buildah..."
                            if ! which buildah > /dev/null 2>&1; then
                                echo "Installing Buildah..."
                                # Install buildah (Ubuntu/Debian)
                                sudo apt-get update && sudo apt-get install -y buildah
                            fi
                            
                            echo "Creating ECR repository if it doesn't exist..."
                            aws ecr describe-repositories --repository-names devops-gp-repository --region ${AWS_DEFAULT_REGION} || \
                            aws ecr create-repository --repository-name devops-gp-repository --region ${AWS_DEFAULT_REGION}
                            
                            echo "Login to ECR..."
                            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | buildah login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                            
                            echo "Building with Buildah..."
                            buildah build -t ${ECR_REPOSITORY}:${IMAGE_TAG} .
                            buildah tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REPOSITORY}:latest
                            
                            echo "Pushing to ECR..."
                            buildah push ${ECR_REPOSITORY}:${IMAGE_TAG}
                            buildah push ${ECR_REPOSITORY}:latest
                            
                            echo "‚úÖ Build and push completed with Buildah"
                        '''
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo "‚úÖ Verifying image deployment in ECR..."
                    
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh '''
                            echo "üìä Checking images in ECR repository:"
                            aws ecr describe-images \
                                --repository-name devops-gp-repository \
                                --region ${AWS_DEFAULT_REGION} \
                                --query 'imageDetails[*].[imageTags[0],imagePushedAt,imageSizeInBytes]' \
                                --output table
                            
                            echo "‚úÖ Successfully verified images in ECR"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                def duration = currentBuild.durationString.replace(' and counting', '')
                
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'good',
                    message: "‚úÖ *Pipeline SUCCESS* - ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                            "Duration: ${duration}\n" +
                            "Image: `${ECR_REPOSITORY}:${IMAGE_TAG}`\n" +
                            "Repository: ${env.NODEJS_REPO}\n" +
                            "Platform: Jenkins + Buildah + ECR üöÄ"
                )
            }
        }
        
        failure {
            script {
                def failedStage = env.STAGE_NAME ?: 'Unknown'
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'danger',
                    message: "‚ùå *Pipeline FAILED* - ${env.JOB_NAME} #${env.BUILD_NUMBER}\n" +
                            "Failed Stage: ${failedStage}\n" +
                            "Repository: ${env.NODEJS_REPO}\n" +
                            "Logs: ${env.BUILD_URL}console\n" +
                            "Please check the build logs for details üîç"
                )
            }
        }
        
        always {
            cleanWs(
                cleanWhenAborted: true,
                cleanWhenFailure: true,
                cleanWhenNotBuilt: true,
                cleanWhenSuccess: true,
                cleanWhenUnstable: true,
                deleteDirs: true
            )
        }
    }
} 